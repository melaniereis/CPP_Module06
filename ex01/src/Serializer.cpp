/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Serializer.cpp                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: meferraz <meferraz@student.42porto.pt>     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/21 15:47:37 by meferraz          #+#    #+#             */
/*   Updated: 2025/05/24 08:15:44 by meferraz         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "Serializer.hpp"

/**
 * @brief Default constructor for the Serializer class.
 *
 * This constructor does not take any arguments and only serves to initialize a
 * Serializer object with default values.
 */
Serializer::Serializer()
{}

/**
 * @brief Destructor for the Serializer class.
 *
 * This destructor cleans up any resources used by the Serializer object.
 * As the Serializer class doesn't allocate any resources in the current
 * implementation, the destructor is empty.
 */
Serializer::~Serializer()
{}

/**
 * @brief Copy constructor for the Serializer class.
 *
 * This copy constructor takes another Serializer object as an argument and
 * creates a deep copy of it. The new object is a separate entity from the
 * original and any changes made to the copied object do not affect the
 * original.
 *
 * @param other The Serializer object to be copied.
 */
Serializer::Serializer(const Serializer &other)
{
	(void)other;
}

/**
 * @brief Assignment operator for the Serializer class.
 *
 * This assignment operator takes another Serializer object as an argument and
 * assigns its values to the current object. But in this case, it doesn't do
 * anything, as the Serializer is not intended to be assigned.
 *
 * @param other The Serializer object to be assigned.
 * @return A reference to the current object.
 */
Serializer &Serializer::operator=(const Serializer &other)
{
	(void)other;
	return *this;
}

/**
 * @brief Serializes a Data object pointer to a uintptr_t.
 *
 * This function converts the memory address of a Data object
 * to a uintptr_t, which is an unsigned integer type capable
 * of holding a pointer. This serialized form can be used for
 * storage or transmission, and can be deserialized back to a
 * Data object pointer using the deserialize function.
 *
 * @param ptr Pointer to the Data object to serialize.
 * @return The uintptr_t representation of the Data object's address.
 */
uintptr_t Serializer::serialize(Data *ptr)
{
	return reinterpret_cast<uintptr_t>(ptr);
}

/**
 * @brief Deserializes a uintptr_t back to a Data object pointer.
 *
 * This function reverses the effect of the serialize function, taking a
 * uintptr_t that was previously generated by serializing a Data object
 * pointer and returns a Data object pointer that points to the same
 * memory address. This Data object pointer can be used in the same way
 * as the original pointer.
 *
 * @param raw The uintptr_t to deserialize.
 * @return The Data object pointer represented by the given uintptr_t.
 */
Data *Serializer::deserialize(uintptr_t raw)
{
	return reinterpret_cast<Data *>(raw);
}
